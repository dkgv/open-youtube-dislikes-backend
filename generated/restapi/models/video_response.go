// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VideoResponse video response
//
// swagger:model VideoResponse
type VideoResponse struct {

	// dislikes
	// Required: true
	Dislikes *int64 `json:"dislikes"`

	// Formatted number of dislikes
	// Required: true
	FormattedDislikes *string `json:"formattedDislikes"`

	// has disliked
	// Required: true
	HasDisliked *bool `json:"hasDisliked"`

	// has liked
	// Required: true
	HasLiked *bool `json:"hasLiked"`
}

// Validate validates this video response
func (m *VideoResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDislikes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormattedDislikes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasDisliked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasLiked(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VideoResponse) validateDislikes(formats strfmt.Registry) error {

	if err := validate.Required("dislikes", "body", m.Dislikes); err != nil {
		return err
	}

	return nil
}

func (m *VideoResponse) validateFormattedDislikes(formats strfmt.Registry) error {

	if err := validate.Required("formattedDislikes", "body", m.FormattedDislikes); err != nil {
		return err
	}

	return nil
}

func (m *VideoResponse) validateHasDisliked(formats strfmt.Registry) error {

	if err := validate.Required("hasDisliked", "body", m.HasDisliked); err != nil {
		return err
	}

	return nil
}

func (m *VideoResponse) validateHasLiked(formats strfmt.Registry) error {

	if err := validate.Required("hasLiked", "body", m.HasLiked); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this video response based on context it is used
func (m *VideoResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VideoResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VideoResponse) UnmarshalBinary(b []byte) error {
	var res VideoResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
