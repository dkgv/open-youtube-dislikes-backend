// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: comment.sql

package db

import (
	"context"
)

const findCommentStatusByVideoID = `-- name: FindCommentStatusByVideoID :one
SELECT EXISTS(SELECT 1 FROM open_youtube_dislikes.comment WHERE video_id = $1)
`

func (q *Queries) FindCommentStatusByVideoID(ctx context.Context, videoID string) (bool, error) {
	row := q.queryRow(ctx, q.findCommentStatusByVideoIDStmt, findCommentStatusByVideoID, videoID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const findSentimentByVideoID = `-- name: FindSentimentByVideoID :one
SELECT AVG(negative) AS negative, AVG(neutral) AS neutral, AVG(positive) AS positive, AVG(compound) AS compound FROM open_youtube_dislikes.comment WHERE video_id = $1
`

type FindSentimentByVideoIDRow struct {
	Negative string `json:"negative"`
	Neutral  string `json:"neutral"`
	Positive string `json:"positive"`
	Compound string `json:"compound"`
}

func (q *Queries) FindSentimentByVideoID(ctx context.Context, videoID string) (FindSentimentByVideoIDRow, error) {
	row := q.queryRow(ctx, q.findSentimentByVideoIDStmt, findSentimentByVideoID, videoID)
	var i FindSentimentByVideoIDRow
	err := row.Scan(
		&i.Negative,
		&i.Neutral,
		&i.Positive,
		&i.Compound,
	)
	return i, err
}

const insertComment = `-- name: InsertComment :exec
INSERT INTO open_youtube_dislikes.comment (video_id, content, negative, neutral, positive, compound) VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertCommentParams struct {
	VideoID  string  `json:"video_id"`
	Content  string  `json:"content"`
	Negative float32 `json:"negative"`
	Neutral  float32 `json:"neutral"`
	Positive float32 `json:"positive"`
	Compound float32 `json:"compound"`
}

func (q *Queries) InsertComment(ctx context.Context, arg InsertCommentParams) error {
	_, err := q.exec(ctx, q.insertCommentStmt, insertComment,
		arg.VideoID,
		arg.Content,
		arg.Negative,
		arg.Neutral,
		arg.Positive,
		arg.Compound,
	)
	return err
}
