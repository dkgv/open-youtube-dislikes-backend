// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: dislike.sql

package db

import (
	"context"
)

const deleteDislike = `-- name: DeleteDislike :exec
DELETE FROM open_youtube_dislikes.dislike WHERE video_id = $1 AND user_id = $2
`

type DeleteDislikeParams struct {
	VideoID string `json:"video_id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) DeleteDislike(ctx context.Context, arg DeleteDislikeParams) error {
	_, err := q.exec(ctx, q.deleteDislikeStmt, deleteDislike, arg.VideoID, arg.UserID)
	return err
}

const findDislike = `-- name: FindDislike :one
SELECT video_id, user_id, created_at FROM open_youtube_dislikes.dislike WHERE video_id = $1 AND user_id = $2
`

type FindDislikeParams struct {
	VideoID string `json:"video_id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) FindDislike(ctx context.Context, arg FindDislikeParams) (OpenYoutubeDislikesDislike, error) {
	row := q.queryRow(ctx, q.findDislikeStmt, findDislike, arg.VideoID, arg.UserID)
	var i OpenYoutubeDislikesDislike
	err := row.Scan(&i.VideoID, &i.UserID, &i.CreatedAt)
	return i, err
}

const getDislikeCount = `-- name: GetDislikeCount :one
SELECT COUNT(*) AS "count" FROM open_youtube_dislikes.dislike WHERE video_id = $1
`

func (q *Queries) GetDislikeCount(ctx context.Context, videoID string) (int64, error) {
	row := q.queryRow(ctx, q.getDislikeCountStmt, getDislikeCount, videoID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertDislike = `-- name: InsertDislike :exec
INSERT INTO open_youtube_dislikes.dislike (video_id, user_id) VALUES ($1, $2)
`

type InsertDislikeParams struct {
	VideoID string `json:"video_id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) InsertDislike(ctx context.Context, arg InsertDislikeParams) error {
	_, err := q.exec(ctx, q.insertDislikeStmt, insertDislike, arg.VideoID, arg.UserID)
	return err
}
