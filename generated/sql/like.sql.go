// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: like.sql

package db

import (
	"context"
)

const deleteLike = `-- name: DeleteLike :exec
DELETE FROM open_youtube_dislikes."like" WHERE video_id = $1 AND user_id = $2
`

type DeleteLikeParams struct {
	VideoID string `json:"video_id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) DeleteLike(ctx context.Context, arg DeleteLikeParams) error {
	_, err := q.exec(ctx, q.deleteLikeStmt, deleteLike, arg.VideoID, arg.UserID)
	return err
}

const findLike = `-- name: FindLike :one
SELECT video_id, user_id, created_at FROM open_youtube_dislikes."like" WHERE video_id = $1 AND user_id = $2
`

type FindLikeParams struct {
	VideoID string `json:"video_id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) FindLike(ctx context.Context, arg FindLikeParams) (OpenYoutubeDislikesLike, error) {
	row := q.queryRow(ctx, q.findLikeStmt, findLike, arg.VideoID, arg.UserID)
	var i OpenYoutubeDislikesLike
	err := row.Scan(&i.VideoID, &i.UserID, &i.CreatedAt)
	return i, err
}

const getLikeCount = `-- name: GetLikeCount :one
SELECT COUNT(*) AS "count" FROM open_youtube_dislikes."like" WHERE video_id = $1
`

func (q *Queries) GetLikeCount(ctx context.Context, videoID string) (int64, error) {
	row := q.queryRow(ctx, q.getLikeCountStmt, getLikeCount, videoID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertLike = `-- name: InsertLike :exec
INSERT INTO open_youtube_dislikes."like" (video_id, user_id) VALUES ($1, $2)
`

type InsertLikeParams struct {
	VideoID string `json:"video_id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) InsertLike(ctx context.Context, arg InsertLikeParams) error {
	_, err := q.exec(ctx, q.insertLikeStmt, insertLike, arg.VideoID, arg.UserID)
	return err
}
