// Code generated by sqlc. DO NOT EDIT.
// source: video.sql

package db

import (
	"context"
)

const findNVideosByIDHash = `-- name: FindNVideosByIDHash :many
SELECT id, id_hash, likes, dislikes, views, comments, subscribers, published_at, created_at, updated_at FROM video WHERE id_hash LIKE $1 LIMIT $2
`

type FindNVideosByIDHashParams struct {
	IDHash string `json:"id_hash"`
	Limit  int32  `json:"limit"`
}

func (q *Queries) FindNVideosByIDHash(ctx context.Context, arg FindNVideosByIDHashParams) ([]Video, error) {
	rows, err := q.query(ctx, q.findNVideosByIDHashStmt, findNVideosByIDHash, arg.IDHash, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Video{}
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.IDHash,
			&i.Likes,
			&i.Dislikes,
			&i.Views,
			&i.Comments,
			&i.Subscribers,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findVideoDetailsByID = `-- name: FindVideoDetailsByID :one
SELECT id, id_hash, likes, dislikes, views, comments, subscribers, published_at, created_at, updated_at FROM video WHERE id = $1
`

func (q *Queries) FindVideoDetailsByID(ctx context.Context, id string) (Video, error) {
	row := q.queryRow(ctx, q.findVideoDetailsByIDStmt, findVideoDetailsByID, id)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.IDHash,
		&i.Likes,
		&i.Dislikes,
		&i.Views,
		&i.Comments,
		&i.Subscribers,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertVideoDetails = `-- name: UpsertVideoDetails :exec
INSERT INTO video
    (id, id_hash, likes, dislikes, views, comments, subscribers)
    VALUES ($1, $2, $3, $4, $5, $6, $7)
    ON CONFLICT (id) DO
        UPDATE SET likes = $3, dislikes = $4, views = $5, comments = $6, subscribers = $7
        WHERE likes <= $3 AND dislikes <= $4 AND views < $5 AND comments <= $6 AND subscribers <= $7
`

type UpsertVideoDetailsParams struct {
	ID          string `json:"id"`
	IDHash      string `json:"id_hash"`
	Likes       int64  `json:"likes"`
	Dislikes    int64  `json:"dislikes"`
	Views       int64  `json:"views"`
	Comments    int64  `json:"comments"`
	Subscribers int64  `json:"subscribers"`
}

func (q *Queries) UpsertVideoDetails(ctx context.Context, arg UpsertVideoDetailsParams) error {
	_, err := q.exec(ctx, q.upsertVideoDetailsStmt, upsertVideoDetails,
		arg.ID,
		arg.IDHash,
		arg.Likes,
		arg.Dislikes,
		arg.Views,
		arg.Comments,
		arg.Subscribers,
	)
	return err
}
