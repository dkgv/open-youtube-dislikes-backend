// Code generated by sqlc. DO NOT EDIT.
// source: youtube_video.sql

package db

import (
	"context"
)

const findYouTubeVideoByID = `-- name: FindYouTubeVideoByID :one
SELECT id, likes, dislikes, views, comments, subscribers, created_at FROM youtube_video WHERE id = $1
`

func (q *Queries) FindYouTubeVideoByID(ctx context.Context, id string) (YoutubeVideo, error) {
	row := q.queryRow(ctx, q.findYouTubeVideoByIDStmt, findYouTubeVideoByID, id)
	var i YoutubeVideo
	err := row.Scan(
		&i.ID,
		&i.Likes,
		&i.Dislikes,
		&i.Views,
		&i.Comments,
		&i.Subscribers,
		&i.CreatedAt,
	)
	return i, err
}

const upsertYouTubeVideo = `-- name: UpsertYouTubeVideo :exec
INSERT INTO youtube_video
    (id, likes, dislikes, views, comments, subscribers)
    VALUES ($1, $2, $3, $4, $5, $6)
    ON CONFLICT (id) DO
        UPDATE SET likes = $2, dislikes = $3, views = $4, comments = $5, subscribers = $6
`

type UpsertYouTubeVideoParams struct {
	ID          string `json:"id"`
	Likes       int64  `json:"likes"`
	Dislikes    int64  `json:"dislikes"`
	Views       int64  `json:"views"`
	Comments    int64  `json:"comments"`
	Subscribers int32  `json:"subscribers"`
}

func (q *Queries) UpsertYouTubeVideo(ctx context.Context, arg UpsertYouTubeVideoParams) error {
	_, err := q.exec(ctx, q.upsertYouTubeVideoStmt, upsertYouTubeVideo,
		arg.ID,
		arg.Likes,
		arg.Dislikes,
		arg.Views,
		arg.Comments,
		arg.Subscribers,
	)
	return err
}
