// Code generated by sqlc. DO NOT EDIT.
// source: aggregate_dislike.sql

package db

import (
	"context"
	"time"
)

const findAggregateDislikeByID = `-- name: FindAggregateDislikeByID :one
SELECT count FROM open_youtube_dislikes.aggregate_dislike WHERE id = $1
`

func (q *Queries) FindAggregateDislikeByID(ctx context.Context, id string) (int32, error) {
	row := q.queryRow(ctx, q.findAggregateDislikeByIDStmt, findAggregateDislikeByID, id)
	var count int32
	err := row.Scan(&count)
	return count, err
}

const insertAggregateDislike = `-- name: InsertAggregateDislike :exec
INSERT INTO open_youtube_dislikes.aggregate_dislike (id, count) VALUES ($1, $2)
`

type InsertAggregateDislikeParams struct {
	ID    string `json:"id"`
	Count int32  `json:"count"`
}

func (q *Queries) InsertAggregateDislike(ctx context.Context, arg InsertAggregateDislikeParams) error {
	_, err := q.exec(ctx, q.insertAggregateDislikeStmt, insertAggregateDislike, arg.ID, arg.Count)
	return err
}

const updateAggregateDislike = `-- name: UpdateAggregateDislike :exec
UPDATE open_youtube_dislikes.aggregate_dislike SET count = $2, updated_at = $3 WHERE id = $1
`

type UpdateAggregateDislikeParams struct {
	ID        string    `json:"id"`
	Count     int32     `json:"count"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateAggregateDislike(ctx context.Context, arg UpdateAggregateDislikeParams) error {
	_, err := q.exec(ctx, q.updateAggregateDislikeStmt, updateAggregateDislike, arg.ID, arg.Count, arg.UpdatedAt)
	return err
}
